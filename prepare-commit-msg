#!/bin/sh
# .git/hooks/prepare-commit-msg

# --- 스크립트 인자 ---
COMMIT_MSG_FILE=$1   # 커밋 메시지가 담긴 임시 파일의 경로
COMMIT_SOURCE=$2   # 커밋 메시지의 출처 (message, template, merge, squash, commit 등)
# SHA1=$3            # (선택사항) 수정 중인 커밋의 SHA-1 (git commit --amend 시)

# --- 로직 시작 ---
# 이 훅은 일반적인 커밋 메시지 생성/수정 시에만 동작하도록 제한합니다.
# (예: merge, squash 커밋 시에는 날짜를 자동으로 추가하지 않음)
if [ -z "$COMMIT_SOURCE" ] || [ "$COMMIT_SOURCE" = "message" ] || [ "$COMMIT_SOURCE" = "template" ]; then
    # 현재 커밋 메시지 파일의 내용을 읽어옴
    current_message=$(cat "$COMMIT_MSG_FILE")

    # 메시지가 이미 'YYYY-MM-DD: ' 형식으로 시작하는지 확인 (중복 추가 방지)
    # Regex: YYYY-MM-DD: (예: 2025-05-14: )
    # [0-9]{4} : 숫자 4개 (년도)
    # [0-9]{2} : 숫자 2개 (월, 일)
    if ! echo "$current_message" | grep -qE "^[0-9]{4}-[0-9]{2}-[0-9]{2}: "; then
        # 오늘 날짜를 YYYY-MM-DD 형식으로 가져옴
        today_date=$(date +'%Y-%m-%d')

        # 기존 메시지가 비어있지 않고, 공백/개행만 있는 것이 아니라면
        if [ -n "$current_message" ] && [ "$(echo "$current_message" | tr -d '\n\r')" != "" ]; then
            # 기존 메시지 앞에 날짜를 추가하여 파일에 덮어씀
            # (예: git commit -m "내용 정리" -> "2025-05-14: 내용 정리")
            echo "$today_date: $current_message" > "$COMMIT_MSG_FILE"
        else
            # 기존 메시지가 없는 경우 (예: git commit 실행 시 편집기 열릴 때)
            # 날짜와 함께 한 칸 공백을 추가하여 사용자가 바로 메시지를 입력하도록 유도
            echo "$today_date: " > "$COMMIT_MSG_FILE"
        fi
    fi
fi

# 스크립트 성공적으로 종료
exit 0